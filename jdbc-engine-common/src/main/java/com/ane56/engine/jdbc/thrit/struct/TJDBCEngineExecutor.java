/**
 * Autogenerated by Thrift Compiler (0.16.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.ane56.engine.jdbc.thrit.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-03-31")
public class TJDBCEngineExecutor implements org.apache.thrift.TBase<TJDBCEngineExecutor, TJDBCEngineExecutor._Fields>, java.io.Serializable, Cloneable, Comparable<TJDBCEngineExecutor> {
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJDBCEngineExecutor");
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField EXECUTOR_REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executorRefId", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJDBCEngineExecutorStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJDBCEngineExecutorTupleSchemeFactory();
    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.EXECUTOR_REF_ID, new org.apache.thrift.meta_data.FieldMetaData("executorRefId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJDBCEngineExecutor.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    java.lang.String host; // required
    public int port; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String prefix; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String executorRefId; // required
    private byte __isset_bitfield = 0;

    public TJDBCEngineExecutor() {
    }

    public TJDBCEngineExecutor(
            java.lang.String host,
            int port,
            java.lang.String prefix,
            java.lang.String executorRefId) {
        this();
        this.host = host;
        this.port = port;
        setPortIsSet(true);
        this.prefix = prefix;
        this.executorRefId = executorRefId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TJDBCEngineExecutor(TJDBCEngineExecutor other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetHost()) {
            this.host = other.host;
        }
        this.port = other.port;
        if (other.isSetPrefix()) {
            this.prefix = other.prefix;
        }
        if (other.isSetExecutorRefId()) {
            this.executorRefId = other.executorRefId;
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }

    public TJDBCEngineExecutor deepCopy() {
        return new TJDBCEngineExecutor(this);
    }

    @Override
    public void clear() {
        this.host = null;
        setPortIsSet(false);
        this.port = 0;
        this.prefix = null;
        this.executorRefId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHost() {
        return this.host;
    }

    public TJDBCEngineExecutor setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
        this.host = host;
        return this;
    }

    public void unsetHost() {
        this.host = null;
    }

    /**
     * Returns true if field host is set (has been assigned a value) and false otherwise
     */
    public boolean isSetHost() {
        return this.host != null;
    }

    public void setHostIsSet(boolean value) {
        if (!value) {
            this.host = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public TJDBCEngineExecutor setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /**
     * Returns true if field port is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPrefix() {
        return this.prefix;
    }

    public TJDBCEngineExecutor setPrefix(@org.apache.thrift.annotation.Nullable java.lang.String prefix) {
        this.prefix = prefix;
        return this;
    }

    public void unsetPrefix() {
        this.prefix = null;
    }

    /**
     * Returns true if field prefix is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPrefix() {
        return this.prefix != null;
    }

    public void setPrefixIsSet(boolean value) {
        if (!value) {
            this.prefix = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getExecutorRefId() {
        return this.executorRefId;
    }

    public TJDBCEngineExecutor setExecutorRefId(@org.apache.thrift.annotation.Nullable java.lang.String executorRefId) {
        this.executorRefId = executorRefId;
        return this;
    }

    public void unsetExecutorRefId() {
        this.executorRefId = null;
    }

    /**
     * Returns true if field executorRefId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetExecutorRefId() {
        return this.executorRefId != null;
    }

    public void setExecutorRefIdIsSet(boolean value) {
        if (!value) {
            this.executorRefId = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case HOST:
                if (value == null) {
                    unsetHost();
                } else {
                    setHost((java.lang.String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((java.lang.Integer) value);
                }
                break;

            case PREFIX:
                if (value == null) {
                    unsetPrefix();
                } else {
                    setPrefix((java.lang.String) value);
                }
                break;

            case EXECUTOR_REF_ID:
                if (value == null) {
                    unsetExecutorRefId();
                } else {
                    setExecutorRefId((java.lang.String) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case HOST:
                return getHost();

            case PORT:
                return getPort();

            case PREFIX:
                return getPrefix();

            case EXECUTOR_REF_ID:
                return getExecutorRefId();

        }
        throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case HOST:
                return isSetHost();
            case PORT:
                return isSetPort();
            case PREFIX:
                return isSetPrefix();
            case EXECUTOR_REF_ID:
                return isSetExecutorRefId();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof TJDBCEngineExecutor)
            return this.equals((TJDBCEngineExecutor) that);
        return false;
    }

    public boolean equals(TJDBCEngineExecutor that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_host = true && this.isSetHost();
        boolean that_present_host = true && that.isSetHost();
        if (this_present_host || that_present_host) {
            if (!(this_present_host && that_present_host))
                return false;
            if (!this.host.equals(that.host))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_prefix = true && this.isSetPrefix();
        boolean that_present_prefix = true && that.isSetPrefix();
        if (this_present_prefix || that_present_prefix) {
            if (!(this_present_prefix && that_present_prefix))
                return false;
            if (!this.prefix.equals(that.prefix))
                return false;
        }

        boolean this_present_executorRefId = true && this.isSetExecutorRefId();
        boolean that_present_executorRefId = true && that.isSetExecutorRefId();
        if (this_present_executorRefId || that_present_executorRefId) {
            if (!(this_present_executorRefId && that_present_executorRefId))
                return false;
            if (!this.executorRefId.equals(that.executorRefId))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
        if (isSetHost())
            hashCode = hashCode * 8191 + host.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + ((isSetPrefix()) ? 131071 : 524287);
        if (isSetPrefix())
            hashCode = hashCode * 8191 + prefix.hashCode();

        hashCode = hashCode * 8191 + ((isSetExecutorRefId()) ? 131071 : 524287);
        if (isSetExecutorRefId())
            hashCode = hashCode * 8191 + executorRefId.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TJDBCEngineExecutor other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetHost(), other.isSetHost());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHost()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPort(), other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPrefix(), other.isSetPrefix());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPrefix()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, other.prefix);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetExecutorRefId(), other.isSetExecutorRefId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetExecutorRefId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorRefId, other.executorRefId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TJDBCEngineExecutor(");
        boolean first = true;

        sb.append("host:");
        if (this.host == null) {
            sb.append("null");
        } else {
            sb.append(this.host);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("prefix:");
        if (this.prefix == null) {
            sb.append("null");
        } else {
            sb.append(this.prefix);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("executorRefId:");
        if (this.executorRefId == null) {
            sb.append("null");
        } else {
            sb.append(this.executorRefId);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        HOST((short) 1, "host"),
        PORT((short) 2, "port"),
        PREFIX((short) 3, "prefix"),
        EXECUTOR_REF_ID((short) 4, "executorRefId");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // HOST
                    return HOST;
                case 2: // PORT
                    return PORT;
                case 3: // PREFIX
                    return PREFIX;
                case 4: // EXECUTOR_REF_ID
                    return EXECUTOR_REF_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    private static class TJDBCEngineExecutorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TJDBCEngineExecutorStandardScheme getScheme() {
            return new TJDBCEngineExecutorStandardScheme();
        }
    }

    private static class TJDBCEngineExecutorStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJDBCEngineExecutor> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TJDBCEngineExecutor struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // HOST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.host = iprot.readString();
                            struct.setHostIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PREFIX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.prefix = iprot.readString();
                            struct.setPrefixIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // EXECUTOR_REF_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.executorRefId = iprot.readString();
                            struct.setExecutorRefIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TJDBCEngineExecutor struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.host != null) {
                oprot.writeFieldBegin(HOST_FIELD_DESC);
                oprot.writeString(struct.host);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            if (struct.prefix != null) {
                oprot.writeFieldBegin(PREFIX_FIELD_DESC);
                oprot.writeString(struct.prefix);
                oprot.writeFieldEnd();
            }
            if (struct.executorRefId != null) {
                oprot.writeFieldBegin(EXECUTOR_REF_ID_FIELD_DESC);
                oprot.writeString(struct.executorRefId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TJDBCEngineExecutorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TJDBCEngineExecutorTupleScheme getScheme() {
            return new TJDBCEngineExecutorTupleScheme();
        }
    }

    private static class TJDBCEngineExecutorTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJDBCEngineExecutor> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TJDBCEngineExecutor struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetHost()) {
                optionals.set(0);
            }
            if (struct.isSetPort()) {
                optionals.set(1);
            }
            if (struct.isSetPrefix()) {
                optionals.set(2);
            }
            if (struct.isSetExecutorRefId()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetHost()) {
                oprot.writeString(struct.host);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetPrefix()) {
                oprot.writeString(struct.prefix);
            }
            if (struct.isSetExecutorRefId()) {
                oprot.writeString(struct.executorRefId);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TJDBCEngineExecutor struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
            }
            if (incoming.get(1)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(2)) {
                struct.prefix = iprot.readString();
                struct.setPrefixIsSet(true);
            }
            if (incoming.get(3)) {
                struct.executorRefId = iprot.readString();
                struct.setExecutorRefIdIsSet(true);
            }
        }
    }
}

