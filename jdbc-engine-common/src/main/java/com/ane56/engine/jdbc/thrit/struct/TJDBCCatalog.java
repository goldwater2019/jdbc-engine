/**
 * Autogenerated by Thrift Compiler (0.16.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.ane56.engine.jdbc.thrit.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-03-29")
public class TJDBCCatalog implements org.apache.thrift.TBase<TJDBCCatalog, TJDBCCatalog._Fields>, java.io.Serializable, Cloneable, Comparable<TJDBCCatalog> {
    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJDBCCatalog");
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("driver", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJDBCCatalogStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJDBCCatalogTupleSchemeFactory();

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DRIVER, new org.apache.thrift.meta_data.FieldMetaData("driver", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJDBCCatalog.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String driver; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String url; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String username; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String password; // required

    public TJDBCCatalog() {
    }

    public TJDBCCatalog(
            java.lang.String name,
            java.lang.String driver,
            java.lang.String url,
            java.lang.String username,
            java.lang.String password) {
        this();
        this.name = name;
        this.driver = driver;
        this.url = url;
        this.username = username;
        this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TJDBCCatalog(TJDBCCatalog other) {
        if (other.isSetName()) {
            this.name = other.name;
        }
        if (other.isSetDriver()) {
            this.driver = other.driver;
        }
        if (other.isSetUrl()) {
            this.url = other.url;
        }
        if (other.isSetUsername()) {
            this.username = other.username;
        }
        if (other.isSetPassword()) {
            this.password = other.password;
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }

    public TJDBCCatalog deepCopy() {
        return new TJDBCCatalog(this);
    }

    @Override
    public void clear() {
        this.name = null;
        this.driver = null;
        this.url = null;
        this.username = null;
        this.password = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
        return this.name;
    }

    public TJDBCCatalog setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDriver() {
        return this.driver;
    }

    public TJDBCCatalog setDriver(@org.apache.thrift.annotation.Nullable java.lang.String driver) {
        this.driver = driver;
        return this;
    }

    public void unsetDriver() {
        this.driver = null;
    }

    /** Returns true if field driver is set (has been assigned a value) and false otherwise */
    public boolean isSetDriver() {
        return this.driver != null;
    }

    public void setDriverIsSet(boolean value) {
        if (!value) {
            this.driver = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
        return this.url;
    }

    public TJDBCCatalog setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
        this.url = url;
        return this;
    }

    public void unsetUrl() {
        this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
        return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
        if (!value) {
            this.url = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsername() {
        return this.username;
    }

    public TJDBCCatalog setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
        this.username = username;
        return this;
    }

    public void unsetUsername() {
        this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
        return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
        if (!value) {
            this.username = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
        return this.password;
    }

    public TJDBCCatalog setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
        this.password = password;
        return this;
    }

    public void unsetPassword() {
        this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
        return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
        if (!value) {
            this.password = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((java.lang.String) value);
                }
                break;

            case DRIVER:
                if (value == null) {
                    unsetDriver();
                } else {
                    setDriver((java.lang.String) value);
                }
                break;

            case URL:
                if (value == null) {
                    unsetUrl();
                } else {
                    setUrl((java.lang.String) value);
                }
                break;

            case USERNAME:
                if (value == null) {
                    unsetUsername();
                } else {
                    setUsername((java.lang.String) value);
                }
                break;

            case PASSWORD:
                if (value == null) {
                    unsetPassword();
                } else {
                    setPassword((java.lang.String) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case NAME:
                return getName();

            case DRIVER:
                return getDriver();

            case URL:
                return getUrl();

            case USERNAME:
                return getUsername();

            case PASSWORD:
                return getPassword();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case NAME:
                return isSetName();
            case DRIVER:
                return isSetDriver();
            case URL:
                return isSetUrl();
            case USERNAME:
                return isSetUsername();
            case PASSWORD:
                return isSetPassword();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof TJDBCCatalog)
            return this.equals((TJDBCCatalog) that);
        return false;
    }

    public boolean equals(TJDBCCatalog that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_driver = true && this.isSetDriver();
        boolean that_present_driver = true && that.isSetDriver();
        if (this_present_driver || that_present_driver) {
            if (!(this_present_driver && that_present_driver))
                return false;
            if (!this.driver.equals(that.driver))
                return false;
        }

        boolean this_present_url = true && this.isSetUrl();
        boolean that_present_url = true && that.isSetUrl();
        if (this_present_url || that_present_url) {
            if (!(this_present_url && that_present_url))
                return false;
            if (!this.url.equals(that.url))
                return false;
        }

        boolean this_present_username = true && this.isSetUsername();
        boolean that_present_username = true && that.isSetUsername();
        if (this_present_username || that_present_username) {
            if (!(this_present_username && that_present_username))
                return false;
            if (!this.username.equals(that.username))
                return false;
        }

        boolean this_present_password = true && this.isSetPassword();
        boolean that_present_password = true && that.isSetPassword();
        if (this_present_password || that_present_password) {
            if (!(this_present_password && that_present_password))
                return false;
            if (!this.password.equals(that.password))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
        if (isSetName())
            hashCode = hashCode * 8191 + name.hashCode();

        hashCode = hashCode * 8191 + ((isSetDriver()) ? 131071 : 524287);
        if (isSetDriver())
            hashCode = hashCode * 8191 + driver.hashCode();

        hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
        if (isSetUrl())
            hashCode = hashCode * 8191 + url.hashCode();

        hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
        if (isSetUsername())
            hashCode = hashCode * 8191 + username.hashCode();

        hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
        if (isSetPassword())
            hashCode = hashCode * 8191 + password.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TJDBCCatalog other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDriver(), other.isSetDriver());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDriver()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driver, other.driver);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUsername()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPassword()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TJDBCCatalog(");
        boolean first = true;

        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("driver:");
        if (this.driver == null) {
            sb.append("null");
        } else {
            sb.append(this.driver);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("url:");
        if (this.url == null) {
            sb.append("null");
        } else {
            sb.append(this.url);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("username:");
        if (this.username == null) {
            sb.append("null");
        } else {
            sb.append(this.username);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("password:");
        if (this.password == null) {
            sb.append("null");
        } else {
            sb.append(this.password);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        NAME((short) 1, "name"),
        DRIVER((short) 2, "driver"),
        URL((short) 3, "url"),
        USERNAME((short) 4, "username"),
        PASSWORD((short) 5, "password");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // NAME
                    return NAME;
                case 2: // DRIVER
                    return DRIVER;
                case 3: // URL
                    return URL;
                case 4: // USERNAME
                    return USERNAME;
                case 5: // PASSWORD
                    return PASSWORD;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    private static class TJDBCCatalogStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TJDBCCatalogStandardScheme getScheme() {
            return new TJDBCCatalogStandardScheme();
        }
    }

    private static class TJDBCCatalogStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJDBCCatalog> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TJDBCCatalog struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // DRIVER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.driver = iprot.readString();
                            struct.setDriverIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // URL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.url = iprot.readString();
                            struct.setUrlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // USERNAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.username = iprot.readString();
                            struct.setUsernameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // PASSWORD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.password = iprot.readString();
                            struct.setPasswordIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TJDBCCatalog struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.driver != null) {
                oprot.writeFieldBegin(DRIVER_FIELD_DESC);
                oprot.writeString(struct.driver);
                oprot.writeFieldEnd();
            }
            if (struct.url != null) {
                oprot.writeFieldBegin(URL_FIELD_DESC);
                oprot.writeString(struct.url);
                oprot.writeFieldEnd();
            }
            if (struct.username != null) {
                oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                oprot.writeString(struct.username);
                oprot.writeFieldEnd();
            }
            if (struct.password != null) {
                oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                oprot.writeString(struct.password);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TJDBCCatalogTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TJDBCCatalogTupleScheme getScheme() {
            return new TJDBCCatalogTupleScheme();
        }
    }

    private static class TJDBCCatalogTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJDBCCatalog> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TJDBCCatalog struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetName()) {
                optionals.set(0);
            }
            if (struct.isSetDriver()) {
                optionals.set(1);
            }
            if (struct.isSetUrl()) {
                optionals.set(2);
            }
            if (struct.isSetUsername()) {
                optionals.set(3);
            }
            if (struct.isSetPassword()) {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetDriver()) {
                oprot.writeString(struct.driver);
            }
            if (struct.isSetUrl()) {
                oprot.writeString(struct.url);
            }
            if (struct.isSetUsername()) {
                oprot.writeString(struct.username);
            }
            if (struct.isSetPassword()) {
                oprot.writeString(struct.password);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TJDBCCatalog struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.driver = iprot.readString();
                struct.setDriverIsSet(true);
            }
            if (incoming.get(2)) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
            }
            if (incoming.get(3)) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
            }
            if (incoming.get(4)) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
            }
        }
    }
}

