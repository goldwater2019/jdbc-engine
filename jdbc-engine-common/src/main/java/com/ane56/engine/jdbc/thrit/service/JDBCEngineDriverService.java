/**
 * Autogenerated by Thrift Compiler (0.16.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.ane56.engine.jdbc.thrit.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-04-02")
public class JDBCEngineDriverService {

    public interface Iface {

        /**
         * 心跳
         *
         *
         * @param jdbcEngineExecutor
         */
        public boolean heartBeat(com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor) throws org.apache.thrift.TException;

        /**
         * 获得相应的catalogs
         *
         */
        public java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> getCatalogs() throws org.apache.thrift.TException;

        /**
         * add catalog
         *
         *
         * @param jdbcCatalog
         */
        public boolean addCatalog(com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog) throws org.apache.thrift.TException;

        /**
         * 数据查询
         *
         *
         * @param querySQL
         */
        public com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef query(java.lang.String querySQL) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void heartBeat(com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

        public void getCatalogs(org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>> resultHandler) throws org.apache.thrift.TException;

        public void addCatalog(com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

        public void query(java.lang.String querySQL, org.apache.thrift.async.AsyncMethodCallback<com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public boolean heartBeat(com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor) throws org.apache.thrift.TException {
            send_heartBeat(jdbcEngineExecutor);
            return recv_heartBeat();
        }

        public void send_heartBeat(com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor) throws org.apache.thrift.TException {
            heartBeat_args args = new heartBeat_args();
            args.setJdbcEngineExecutor(jdbcEngineExecutor);
            sendBase("heartBeat", args);
        }

        public boolean recv_heartBeat() throws org.apache.thrift.TException {
            heartBeat_result result = new heartBeat_result();
            receiveBase(result, "heartBeat");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "heartBeat failed: unknown result");
        }

        public java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> getCatalogs() throws org.apache.thrift.TException {
            send_getCatalogs();
            return recv_getCatalogs();
        }

        public void send_getCatalogs() throws org.apache.thrift.TException {
            getCatalogs_args args = new getCatalogs_args();
            sendBase("getCatalogs", args);
        }

        public java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> recv_getCatalogs() throws org.apache.thrift.TException {
            getCatalogs_result result = new getCatalogs_result();
            receiveBase(result, "getCatalogs");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCatalogs failed: unknown result");
        }

        public boolean addCatalog(com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog) throws org.apache.thrift.TException {
            send_addCatalog(jdbcCatalog);
            return recv_addCatalog();
        }

        public void send_addCatalog(com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog) throws org.apache.thrift.TException {
            addCatalog_args args = new addCatalog_args();
            args.setJdbcCatalog(jdbcCatalog);
            sendBase("addCatalog", args);
        }

        public boolean recv_addCatalog() throws org.apache.thrift.TException {
            addCatalog_result result = new addCatalog_result();
            receiveBase(result, "addCatalog");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCatalog failed: unknown result");
        }

        public com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef query(java.lang.String querySQL) throws org.apache.thrift.TException {
            send_query(querySQL);
            return recv_query();
        }

        public void send_query(java.lang.String querySQL) throws org.apache.thrift.TException {
            query_args args = new query_args();
            args.setQuerySQL(querySQL);
            sendBase("query", args);
        }

        public com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef recv_query() throws org.apache.thrift.TException {
            query_result result = new query_result();
            receiveBase(result, "query");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void heartBeat(com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            heartBeat_call method_call = new heartBeat_call(jdbcEngineExecutor, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getCatalogs(org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCatalogs_call method_call = new getCatalogs_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void addCatalog(com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addCatalog_call method_call = new addCatalog_call(jdbcCatalog, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void query(java.lang.String querySQL, org.apache.thrift.async.AsyncMethodCallback<com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            query_call method_call = new query_call(querySQL, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class heartBeat_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
            private com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor;

            public heartBeat_call(com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.jdbcEngineExecutor = jdbcEngineExecutor;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("heartBeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
                heartBeat_args args = new heartBeat_args();
                args.setJdbcEngineExecutor(jdbcEngineExecutor);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_heartBeat();
            }
        }

        public static class getCatalogs_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>> {
            public getCatalogs_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCatalogs", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCatalogs_args args = new getCatalogs_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCatalogs();
            }
        }

        public static class addCatalog_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
            private com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog;

            public addCatalog_call(com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.jdbcCatalog = jdbcCatalog;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCatalog", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addCatalog_args args = new addCatalog_args();
                args.setJdbcCatalog(jdbcCatalog);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addCatalog();
            }
        }

        public static class query_call extends org.apache.thrift.async.TAsyncMethodCall<com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef> {
            private java.lang.String querySQL;

            public query_call(java.lang.String querySQL, org.apache.thrift.async.AsyncMethodCallback<com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.querySQL = querySQL;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
                query_args args = new query_args();
                args.setQuerySQL(querySQL);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_query();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("heartBeat", new heartBeat());
            processMap.put("getCatalogs", new getCatalogs());
            processMap.put("addCatalog", new addCatalog());
            processMap.put("query", new query());
            return processMap;
        }

        public static class heartBeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, heartBeat_args> {
            public heartBeat() {
                super("heartBeat");
            }

            public heartBeat_args getEmptyArgsInstance() {
                return new heartBeat_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public heartBeat_result getResult(I iface, heartBeat_args args) throws org.apache.thrift.TException {
                heartBeat_result result = new heartBeat_result();
                result.success = iface.heartBeat(args.jdbcEngineExecutor);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getCatalogs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCatalogs_args> {
            public getCatalogs() {
                super("getCatalogs");
            }

            public getCatalogs_args getEmptyArgsInstance() {
                return new getCatalogs_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public getCatalogs_result getResult(I iface, getCatalogs_args args) throws org.apache.thrift.TException {
                getCatalogs_result result = new getCatalogs_result();
                result.success = iface.getCatalogs();
                return result;
            }
        }

        public static class addCatalog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCatalog_args> {
            public addCatalog() {
                super("addCatalog");
            }

            public addCatalog_args getEmptyArgsInstance() {
                return new addCatalog_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public addCatalog_result getResult(I iface, addCatalog_args args) throws org.apache.thrift.TException {
                addCatalog_result result = new addCatalog_result();
                result.success = iface.addCatalog(args.jdbcCatalog);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
            public query() {
                super("query");
            }

            public query_args getEmptyArgsInstance() {
                return new query_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
                query_result result = new query_result();
                result.success = iface.query(args.querySQL);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("heartBeat", new heartBeat());
            processMap.put("getCatalogs", new getCatalogs());
            processMap.put("addCatalog", new addCatalog());
            processMap.put("query", new query());
            return processMap;
        }

        public static class heartBeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, heartBeat_args, java.lang.Boolean> {
            public heartBeat() {
                super("heartBeat");
            }

            public heartBeat_args getEmptyArgsInstance() {
                return new heartBeat_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
                    public void onComplete(java.lang.Boolean o) {
                        heartBeat_result result = new heartBeat_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        heartBeat_result result = new heartBeat_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, heartBeat_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
                iface.heartBeat(args.jdbcEngineExecutor, resultHandler);
            }
        }

        public static class getCatalogs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCatalogs_args, java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>> {
            public getCatalogs() {
                super("getCatalogs");
            }

            public getCatalogs_args getEmptyArgsInstance() {
                return new getCatalogs_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>>() {
                    public void onComplete(java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> o) {
                        getCatalogs_result result = new getCatalogs_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCatalogs_result result = new getCatalogs_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCatalogs_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>> resultHandler) throws org.apache.thrift.TException {
                iface.getCatalogs(resultHandler);
            }
        }

        public static class addCatalog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCatalog_args, java.lang.Boolean> {
            public addCatalog() {
                super("addCatalog");
            }

            public addCatalog_args getEmptyArgsInstance() {
                return new addCatalog_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
                    public void onComplete(java.lang.Boolean o) {
                        addCatalog_result result = new addCatalog_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addCatalog_result result = new addCatalog_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addCatalog_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
                iface.addCatalog(args.jdbcCatalog, resultHandler);
            }
        }

        public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef> {
            public query() {
                super("query");
            }

            public query_args getEmptyArgsInstance() {
                return new query_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef>() {
                    public void onComplete(com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef o) {
                        query_result result = new query_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        query_result result = new query_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef> resultHandler) throws org.apache.thrift.TException {
                iface.query(args.querySQL, resultHandler);
            }
        }

    }

    public static class heartBeat_args implements org.apache.thrift.TBase<heartBeat_args, heartBeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<heartBeat_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartBeat_args");
        private static final org.apache.thrift.protocol.TField JDBC_ENGINE_EXECUTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbcEngineExecutor", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new heartBeat_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new heartBeat_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.JDBC_ENGINE_EXECUTOR, new org.apache.thrift.meta_data.FieldMetaData("jdbcEngineExecutor", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartBeat_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor; // required

        public heartBeat_args() {
        }

        public heartBeat_args(
                com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor) {
            this();
            this.jdbcEngineExecutor = jdbcEngineExecutor;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public heartBeat_args(heartBeat_args other) {
            if (other.isSetJdbcEngineExecutor()) {
                this.jdbcEngineExecutor = new com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor(other.jdbcEngineExecutor);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public heartBeat_args deepCopy() {
            return new heartBeat_args(this);
        }

        @Override
        public void clear() {
            this.jdbcEngineExecutor = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor getJdbcEngineExecutor() {
            return this.jdbcEngineExecutor;
        }

        public heartBeat_args setJdbcEngineExecutor(@org.apache.thrift.annotation.Nullable com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor jdbcEngineExecutor) {
            this.jdbcEngineExecutor = jdbcEngineExecutor;
            return this;
        }

        public void unsetJdbcEngineExecutor() {
            this.jdbcEngineExecutor = null;
        }

        /** Returns true if field jdbcEngineExecutor is set (has been assigned a value) and false otherwise */
        public boolean isSetJdbcEngineExecutor() {
            return this.jdbcEngineExecutor != null;
        }

        public void setJdbcEngineExecutorIsSet(boolean value) {
            if (!value) {
                this.jdbcEngineExecutor = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case JDBC_ENGINE_EXECUTOR:
                    if (value == null) {
                        unsetJdbcEngineExecutor();
                    } else {
                        setJdbcEngineExecutor((com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case JDBC_ENGINE_EXECUTOR:
                    return getJdbcEngineExecutor();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case JDBC_ENGINE_EXECUTOR:
                    return isSetJdbcEngineExecutor();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof heartBeat_args)
                return this.equals((heartBeat_args) that);
            return false;
        }

        public boolean equals(heartBeat_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_jdbcEngineExecutor = true && this.isSetJdbcEngineExecutor();
            boolean that_present_jdbcEngineExecutor = true && that.isSetJdbcEngineExecutor();
            if (this_present_jdbcEngineExecutor || that_present_jdbcEngineExecutor) {
                if (!(this_present_jdbcEngineExecutor && that_present_jdbcEngineExecutor))
                    return false;
                if (!this.jdbcEngineExecutor.equals(that.jdbcEngineExecutor))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetJdbcEngineExecutor()) ? 131071 : 524287);
            if (isSetJdbcEngineExecutor())
                hashCode = hashCode * 8191 + jdbcEngineExecutor.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(heartBeat_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetJdbcEngineExecutor(), other.isSetJdbcEngineExecutor());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetJdbcEngineExecutor()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbcEngineExecutor, other.jdbcEngineExecutor);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("heartBeat_args(");
            boolean first = true;

            sb.append("jdbcEngineExecutor:");
            if (this.jdbcEngineExecutor == null) {
                sb.append("null");
            } else {
                sb.append(this.jdbcEngineExecutor);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (jdbcEngineExecutor != null) {
                jdbcEngineExecutor.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            JDBC_ENGINE_EXECUTOR((short) 1, "jdbcEngineExecutor");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // JDBC_ENGINE_EXECUTOR
                        return JDBC_ENGINE_EXECUTOR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class heartBeat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public heartBeat_argsStandardScheme getScheme() {
                return new heartBeat_argsStandardScheme();
            }
        }

        private static class heartBeat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<heartBeat_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, heartBeat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // JDBC_ENGINE_EXECUTOR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.jdbcEngineExecutor = new com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor();
                                struct.jdbcEngineExecutor.read(iprot);
                                struct.setJdbcEngineExecutorIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, heartBeat_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.jdbcEngineExecutor != null) {
                    oprot.writeFieldBegin(JDBC_ENGINE_EXECUTOR_FIELD_DESC);
                    struct.jdbcEngineExecutor.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class heartBeat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public heartBeat_argsTupleScheme getScheme() {
                return new heartBeat_argsTupleScheme();
            }
        }

        private static class heartBeat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<heartBeat_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, heartBeat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetJdbcEngineExecutor()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetJdbcEngineExecutor()) {
                    struct.jdbcEngineExecutor.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, heartBeat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.jdbcEngineExecutor = new com.ane56.engine.jdbc.thrit.struct.TJDBCEngineExecutor();
                    struct.jdbcEngineExecutor.read(iprot);
                    struct.setJdbcEngineExecutorIsSet(true);
                }
            }
        }
    }

    public static class heartBeat_result implements org.apache.thrift.TBase<heartBeat_result, heartBeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<heartBeat_result> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartBeat_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new heartBeat_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new heartBeat_resultTupleSchemeFactory();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartBeat_result.class, metaDataMap);
        }

        public boolean success; // required
        private byte __isset_bitfield = 0;

        public heartBeat_result() {
        }

        public heartBeat_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public heartBeat_result(heartBeat_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public heartBeat_result deepCopy() {
            return new heartBeat_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public heartBeat_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof heartBeat_result)
                return this.equals((heartBeat_result) that);
            return false;
        }

        public boolean equals(heartBeat_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(heartBeat_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("heartBeat_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class heartBeat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public heartBeat_resultStandardScheme getScheme() {
                return new heartBeat_resultStandardScheme();
            }
        }

        private static class heartBeat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<heartBeat_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, heartBeat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, heartBeat_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class heartBeat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public heartBeat_resultTupleScheme getScheme() {
                return new heartBeat_resultTupleScheme();
            }
        }

        private static class heartBeat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<heartBeat_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, heartBeat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, heartBeat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class getCatalogs_args implements org.apache.thrift.TBase<getCatalogs_args, getCatalogs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCatalogs_args> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCatalogs_args");
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCatalogs_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCatalogs_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCatalogs_args.class, metaDataMap);
        }

        public getCatalogs_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCatalogs_args(getCatalogs_args other) {
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public getCatalogs_args deepCopy() {
            return new getCatalogs_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof getCatalogs_args)
                return this.equals((getCatalogs_args) that);
            return false;
        }

        public boolean equals(getCatalogs_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(getCatalogs_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCatalogs_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class getCatalogs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCatalogs_argsStandardScheme getScheme() {
                return new getCatalogs_argsStandardScheme();
            }
        }

        private static class getCatalogs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCatalogs_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCatalogs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCatalogs_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCatalogs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCatalogs_argsTupleScheme getScheme() {
                return new getCatalogs_argsTupleScheme();
            }
        }

        private static class getCatalogs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCatalogs_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCatalogs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCatalogs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }
    }

    public static class getCatalogs_result implements org.apache.thrift.TBase<getCatalogs_result, getCatalogs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCatalogs_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCatalogs_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCatalogs_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCatalogs_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCatalogs_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> success; // required

        public getCatalogs_result() {
        }

        public getCatalogs_result(
                java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCatalogs_result(getCatalogs_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> __this__success = new java.util.ArrayList<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>(other.success.size());
                for (com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog other_element : other.success) {
                    __this__success.add(new com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog(other_element));
                }
                this.success = __this__success;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public getCatalogs_result deepCopy() {
            return new getCatalogs_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> getSuccess() {
            return this.success;
        }

        public getCatalogs_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof getCatalogs_result)
                return this.equals((getCatalogs_result) that);
            return false;
        }

        public boolean equals(getCatalogs_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCatalogs_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCatalogs_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class getCatalogs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCatalogs_resultStandardScheme getScheme() {
                return new getCatalogs_resultStandardScheme();
            }
        }

        private static class getCatalogs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCatalogs_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCatalogs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>(_list0.size);
                                    @org.apache.thrift.annotation.Nullable com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                        _elem1 = new com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog();
                                        _elem1.read(iprot);
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCatalogs_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog _iter3 : struct.success) {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCatalogs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCatalogs_resultTupleScheme getScheme() {
                return new getCatalogs_resultTupleScheme();
            }
        }

        private static class getCatalogs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCatalogs_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCatalogs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog _iter4 : struct.success) {
                            _iter4.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCatalogs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                        struct.success = new java.util.ArrayList<com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog>(_list5.size);
                        @org.apache.thrift.annotation.Nullable com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                            _elem6 = new com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog();
                            _elem6.read(iprot);
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class addCatalog_args implements org.apache.thrift.TBase<addCatalog_args, addCatalog_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCatalog_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCatalog_args");
        private static final org.apache.thrift.protocol.TField JDBC_CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbcCatalog", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCatalog_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCatalog_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.JDBC_CATALOG, new org.apache.thrift.meta_data.FieldMetaData("jdbcCatalog", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCatalog_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog; // required

        public addCatalog_args() {
        }

        public addCatalog_args(
                com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog) {
            this();
            this.jdbcCatalog = jdbcCatalog;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCatalog_args(addCatalog_args other) {
            if (other.isSetJdbcCatalog()) {
                this.jdbcCatalog = new com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog(other.jdbcCatalog);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public addCatalog_args deepCopy() {
            return new addCatalog_args(this);
        }

        @Override
        public void clear() {
            this.jdbcCatalog = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog getJdbcCatalog() {
            return this.jdbcCatalog;
        }

        public addCatalog_args setJdbcCatalog(@org.apache.thrift.annotation.Nullable com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog jdbcCatalog) {
            this.jdbcCatalog = jdbcCatalog;
            return this;
        }

        public void unsetJdbcCatalog() {
            this.jdbcCatalog = null;
        }

        /** Returns true if field jdbcCatalog is set (has been assigned a value) and false otherwise */
        public boolean isSetJdbcCatalog() {
            return this.jdbcCatalog != null;
        }

        public void setJdbcCatalogIsSet(boolean value) {
            if (!value) {
                this.jdbcCatalog = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case JDBC_CATALOG:
                    if (value == null) {
                        unsetJdbcCatalog();
                    } else {
                        setJdbcCatalog((com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case JDBC_CATALOG:
                    return getJdbcCatalog();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case JDBC_CATALOG:
                    return isSetJdbcCatalog();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof addCatalog_args)
                return this.equals((addCatalog_args) that);
            return false;
        }

        public boolean equals(addCatalog_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_jdbcCatalog = true && this.isSetJdbcCatalog();
            boolean that_present_jdbcCatalog = true && that.isSetJdbcCatalog();
            if (this_present_jdbcCatalog || that_present_jdbcCatalog) {
                if (!(this_present_jdbcCatalog && that_present_jdbcCatalog))
                    return false;
                if (!this.jdbcCatalog.equals(that.jdbcCatalog))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetJdbcCatalog()) ? 131071 : 524287);
            if (isSetJdbcCatalog())
                hashCode = hashCode * 8191 + jdbcCatalog.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addCatalog_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetJdbcCatalog(), other.isSetJdbcCatalog());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetJdbcCatalog()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbcCatalog, other.jdbcCatalog);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addCatalog_args(");
            boolean first = true;

            sb.append("jdbcCatalog:");
            if (this.jdbcCatalog == null) {
                sb.append("null");
            } else {
                sb.append(this.jdbcCatalog);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (jdbcCatalog != null) {
                jdbcCatalog.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            JDBC_CATALOG((short) 1, "jdbcCatalog");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // JDBC_CATALOG
                        return JDBC_CATALOG;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class addCatalog_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCatalog_argsStandardScheme getScheme() {
                return new addCatalog_argsStandardScheme();
            }
        }

        private static class addCatalog_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCatalog_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addCatalog_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // JDBC_CATALOG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.jdbcCatalog = new com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog();
                                struct.jdbcCatalog.read(iprot);
                                struct.setJdbcCatalogIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addCatalog_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.jdbcCatalog != null) {
                    oprot.writeFieldBegin(JDBC_CATALOG_FIELD_DESC);
                    struct.jdbcCatalog.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCatalog_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCatalog_argsTupleScheme getScheme() {
                return new addCatalog_argsTupleScheme();
            }
        }

        private static class addCatalog_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCatalog_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCatalog_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetJdbcCatalog()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetJdbcCatalog()) {
                    struct.jdbcCatalog.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCatalog_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.jdbcCatalog = new com.ane56.engine.jdbc.thrit.struct.TJDBCCatalog();
                    struct.jdbcCatalog.read(iprot);
                    struct.setJdbcCatalogIsSet(true);
                }
            }
        }
    }

    public static class addCatalog_result implements org.apache.thrift.TBase<addCatalog_result, addCatalog_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCatalog_result> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCatalog_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCatalog_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCatalog_resultTupleSchemeFactory();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCatalog_result.class, metaDataMap);
        }

        public boolean success; // required
        private byte __isset_bitfield = 0;

        public addCatalog_result() {
        }

        public addCatalog_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCatalog_result(addCatalog_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public addCatalog_result deepCopy() {
            return new addCatalog_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public addCatalog_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof addCatalog_result)
                return this.equals((addCatalog_result) that);
            return false;
        }

        public boolean equals(addCatalog_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(addCatalog_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addCatalog_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class addCatalog_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCatalog_resultStandardScheme getScheme() {
                return new addCatalog_resultStandardScheme();
            }
        }

        private static class addCatalog_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCatalog_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addCatalog_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addCatalog_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCatalog_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCatalog_resultTupleScheme getScheme() {
                return new addCatalog_resultTupleScheme();
            }
        }

        private static class addCatalog_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCatalog_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCatalog_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCatalog_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");
        private static final org.apache.thrift.protocol.TField QUERY_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("querySQL", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new query_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new query_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.QUERY_SQL, new org.apache.thrift.meta_data.FieldMetaData("querySQL", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.lang.String querySQL; // required

        public query_args() {
        }

        public query_args(
                java.lang.String querySQL) {
            this();
            this.querySQL = querySQL;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public query_args(query_args other) {
            if (other.isSetQuerySQL()) {
                this.querySQL = other.querySQL;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public query_args deepCopy() {
            return new query_args(this);
        }

        @Override
        public void clear() {
            this.querySQL = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getQuerySQL() {
            return this.querySQL;
        }

        public query_args setQuerySQL(@org.apache.thrift.annotation.Nullable java.lang.String querySQL) {
            this.querySQL = querySQL;
            return this;
        }

        public void unsetQuerySQL() {
            this.querySQL = null;
        }

        /** Returns true if field querySQL is set (has been assigned a value) and false otherwise */
        public boolean isSetQuerySQL() {
            return this.querySQL != null;
        }

        public void setQuerySQLIsSet(boolean value) {
            if (!value) {
                this.querySQL = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case QUERY_SQL:
                    if (value == null) {
                        unsetQuerySQL();
                    } else {
                        setQuerySQL((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case QUERY_SQL:
                    return getQuerySQL();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case QUERY_SQL:
                    return isSetQuerySQL();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof query_args)
                return this.equals((query_args) that);
            return false;
        }

        public boolean equals(query_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_querySQL = true && this.isSetQuerySQL();
            boolean that_present_querySQL = true && that.isSetQuerySQL();
            if (this_present_querySQL || that_present_querySQL) {
                if (!(this_present_querySQL && that_present_querySQL))
                    return false;
                if (!this.querySQL.equals(that.querySQL))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetQuerySQL()) ? 131071 : 524287);
            if (isSetQuerySQL())
                hashCode = hashCode * 8191 + querySQL.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(query_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetQuerySQL(), other.isSetQuerySQL());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetQuerySQL()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.querySQL, other.querySQL);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("query_args(");
            boolean first = true;

            sb.append("querySQL:");
            if (this.querySQL == null) {
                sb.append("null");
            } else {
                sb.append(this.querySQL);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            QUERY_SQL((short) 1, "querySQL");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // QUERY_SQL
                        return QUERY_SQL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class query_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public query_argsStandardScheme getScheme() {
                return new query_argsStandardScheme();
            }
        }

        private static class query_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<query_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // QUERY_SQL
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.querySQL = iprot.readString();
                                struct.setQuerySQLIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.querySQL != null) {
                    oprot.writeFieldBegin(QUERY_SQL_FIELD_DESC);
                    oprot.writeString(struct.querySQL);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class query_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public query_argsTupleScheme getScheme() {
                return new query_argsTupleScheme();
            }
        }

        private static class query_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<query_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetQuerySQL()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetQuerySQL()) {
                    oprot.writeString(struct.querySQL);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.querySQL = iprot.readString();
                    struct.setQuerySQLIsSet(true);
                }
            }
        }
    }

    public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new query_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new query_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef success; // required

        public query_result() {
        }

        public query_result(
                com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public query_result(query_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef(other.success);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public query_result deepCopy() {
            return new query_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef getSuccess() {
            return this.success;
        }

        public query_result setSuccess(@org.apache.thrift.annotation.Nullable com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof query_result)
                return this.equals((query_result) that);
            return false;
        }

        public boolean equals(query_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(query_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("query_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class query_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public query_resultStandardScheme getScheme() {
                return new query_resultStandardScheme();
            }
        }

        private static class query_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<query_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class query_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public query_resultTupleScheme getScheme() {
                return new query_resultTupleScheme();
            }
        }

        private static class query_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<query_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.ane56.engine.jdbc.thrit.struct.TJDBCResultRef();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

}
