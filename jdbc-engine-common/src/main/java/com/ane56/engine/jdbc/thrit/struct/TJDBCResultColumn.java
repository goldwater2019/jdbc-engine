/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ane56.engine.jdbc.thrit.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-03-31")
public class TJDBCResultColumn implements org.apache.thrift.TBase<TJDBCResultColumn, TJDBCResultColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TJDBCResultColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJDBCResultColumn");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnClassName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValue", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJDBCResultColumnStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJDBCResultColumnTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String columnName; // required
  /**
   * 
   * @see com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType
   */
  public @org.apache.thrift.annotation.Nullable com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType columnType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String columnClassName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String columnValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "columnName"),
    /**
     * 
     * @see com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType
     */
    COLUMN_TYPE((short)2, "columnType"),
    COLUMN_CLASS_NAME((short)3, "columnClassName"),
    COLUMN_VALUE((short)4, "columnValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 3: // COLUMN_CLASS_NAME
          return COLUMN_CLASS_NAME;
        case 4: // COLUMN_VALUE
          return COLUMN_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("columnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType.class)));
    tmpMap.put(_Fields.COLUMN_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnClassName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("columnValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJDBCResultColumn.class, metaDataMap);
  }

  public TJDBCResultColumn() {
  }

  public TJDBCResultColumn(
    java.lang.String columnName,
    com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType columnType,
    java.lang.String columnClassName,
    java.lang.String columnValue)
  {
    this();
    this.columnName = columnName;
    this.columnType = columnType;
    this.columnClassName = columnClassName;
    this.columnValue = columnValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJDBCResultColumn(TJDBCResultColumn other) {
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    if (other.isSetColumnType()) {
      this.columnType = other.columnType;
    }
    if (other.isSetColumnClassName()) {
      this.columnClassName = other.columnClassName;
    }
    if (other.isSetColumnValue()) {
      this.columnValue = other.columnValue;
    }
  }

  public TJDBCResultColumn deepCopy() {
    return new TJDBCResultColumn(this);
  }

  @Override
  public void clear() {
    this.columnName = null;
    this.columnType = null;
    this.columnClassName = null;
    this.columnValue = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnName() {
    return this.columnName;
  }

  public TJDBCResultColumn setColumnName(@org.apache.thrift.annotation.Nullable java.lang.String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  /**
   * 
   * @see com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType
   */
  @org.apache.thrift.annotation.Nullable
  public com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType getColumnType() {
    return this.columnType;
  }

  /**
   * 
   * @see com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType
   */
  public TJDBCResultColumn setColumnType(@org.apache.thrift.annotation.Nullable com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType columnType) {
    this.columnType = columnType;
    return this;
  }

  public void unsetColumnType() {
    this.columnType = null;
  }

  /** Returns true if field columnType is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnType() {
    return this.columnType != null;
  }

  public void setColumnTypeIsSet(boolean value) {
    if (!value) {
      this.columnType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnClassName() {
    return this.columnClassName;
  }

  public TJDBCResultColumn setColumnClassName(@org.apache.thrift.annotation.Nullable java.lang.String columnClassName) {
    this.columnClassName = columnClassName;
    return this;
  }

  public void unsetColumnClassName() {
    this.columnClassName = null;
  }

  /** Returns true if field columnClassName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnClassName() {
    return this.columnClassName != null;
  }

  public void setColumnClassNameIsSet(boolean value) {
    if (!value) {
      this.columnClassName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnValue() {
    return this.columnValue;
  }

  public TJDBCResultColumn setColumnValue(@org.apache.thrift.annotation.Nullable java.lang.String columnValue) {
    this.columnValue = columnValue;
    return this;
  }

  public void unsetColumnValue() {
    this.columnValue = null;
  }

  /** Returns true if field columnValue is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnValue() {
    return this.columnValue != null;
  }

  public void setColumnValueIsSet(boolean value) {
    if (!value) {
      this.columnValue = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((java.lang.String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumnType();
      } else {
        setColumnType((com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType)value);
      }
      break;

    case COLUMN_CLASS_NAME:
      if (value == null) {
        unsetColumnClassName();
      } else {
        setColumnClassName((java.lang.String)value);
      }
      break;

    case COLUMN_VALUE:
      if (value == null) {
        unsetColumnValue();
      } else {
        setColumnValue((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumnName();

    case COLUMN_TYPE:
      return getColumnType();

    case COLUMN_CLASS_NAME:
      return getColumnClassName();

    case COLUMN_VALUE:
      return getColumnValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumnName();
    case COLUMN_TYPE:
      return isSetColumnType();
    case COLUMN_CLASS_NAME:
      return isSetColumnClassName();
    case COLUMN_VALUE:
      return isSetColumnValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TJDBCResultColumn)
      return this.equals((TJDBCResultColumn)that);
    return false;
  }

  public boolean equals(TJDBCResultColumn that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_columnType = true && this.isSetColumnType();
    boolean that_present_columnType = true && that.isSetColumnType();
    if (this_present_columnType || that_present_columnType) {
      if (!(this_present_columnType && that_present_columnType))
        return false;
      if (!this.columnType.equals(that.columnType))
        return false;
    }

    boolean this_present_columnClassName = true && this.isSetColumnClassName();
    boolean that_present_columnClassName = true && that.isSetColumnClassName();
    if (this_present_columnClassName || that_present_columnClassName) {
      if (!(this_present_columnClassName && that_present_columnClassName))
        return false;
      if (!this.columnClassName.equals(that.columnClassName))
        return false;
    }

    boolean this_present_columnValue = true && this.isSetColumnValue();
    boolean that_present_columnValue = true && that.isSetColumnValue();
    if (this_present_columnValue || that_present_columnValue) {
      if (!(this_present_columnValue && that_present_columnValue))
        return false;
      if (!this.columnValue.equals(that.columnValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnName()) ? 131071 : 524287);
    if (isSetColumnName())
      hashCode = hashCode * 8191 + columnName.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnType()) ? 131071 : 524287);
    if (isSetColumnType())
      hashCode = hashCode * 8191 + columnType.getValue();

    hashCode = hashCode * 8191 + ((isSetColumnClassName()) ? 131071 : 524287);
    if (isSetColumnClassName())
      hashCode = hashCode * 8191 + columnClassName.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnValue()) ? 131071 : 524287);
    if (isSetColumnValue())
      hashCode = hashCode * 8191 + columnValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TJDBCResultColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnName(), other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnType(), other.isSetColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnType, other.columnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnClassName(), other.isSetColumnClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnClassName, other.columnClassName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnValue(), other.isSetColumnValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValue, other.columnValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TJDBCResultColumn(");
    boolean first = true;

    sb.append("columnName:");
    if (this.columnName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnType:");
    if (this.columnType == null) {
      sb.append("null");
    } else {
      sb.append(this.columnType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnClassName:");
    if (this.columnClassName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnClassName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnValue:");
    if (this.columnValue == null) {
      sb.append("null");
    } else {
      sb.append(this.columnValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJDBCResultColumnStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJDBCResultColumnStandardScheme getScheme() {
      return new TJDBCResultColumnStandardScheme();
    }
  }

  private static class TJDBCResultColumnStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJDBCResultColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TJDBCResultColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnType = com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType.findByValue(iprot.readI32());
              struct.setColumnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnClassName = iprot.readString();
              struct.setColumnClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnValue = iprot.readString();
              struct.setColumnValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TJDBCResultColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnName != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.columnName);
        oprot.writeFieldEnd();
      }
      if (struct.columnType != null) {
        oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.columnType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.columnClassName != null) {
        oprot.writeFieldBegin(COLUMN_CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.columnClassName);
        oprot.writeFieldEnd();
      }
      if (struct.columnValue != null) {
        oprot.writeFieldBegin(COLUMN_VALUE_FIELD_DESC);
        oprot.writeString(struct.columnValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJDBCResultColumnTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJDBCResultColumnTupleScheme getScheme() {
      return new TJDBCResultColumnTupleScheme();
    }
  }

  private static class TJDBCResultColumnTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJDBCResultColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TJDBCResultColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnName()) {
        optionals.set(0);
      }
      if (struct.isSetColumnType()) {
        optionals.set(1);
      }
      if (struct.isSetColumnClassName()) {
        optionals.set(2);
      }
      if (struct.isSetColumnValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetColumnName()) {
        oprot.writeString(struct.columnName);
      }
      if (struct.isSetColumnType()) {
        oprot.writeI32(struct.columnType.getValue());
      }
      if (struct.isSetColumnClassName()) {
        oprot.writeString(struct.columnClassName);
      }
      if (struct.isSetColumnValue()) {
        oprot.writeString(struct.columnValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TJDBCResultColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.columnName = iprot.readString();
        struct.setColumnNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.columnType = com.ane56.engine.jdbc.thrit.enumeration.TJDBCColumnType.findByValue(iprot.readI32());
        struct.setColumnTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.columnClassName = iprot.readString();
        struct.setColumnClassNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.columnValue = iprot.readString();
        struct.setColumnValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

